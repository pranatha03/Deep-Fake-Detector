import cv2
import os
import numpy as np
import random


input_folder = r"C:\Users\namee\OneDrive\Desktop\coding\normalized_frames"  
output_folder = os.path.join(input_folder, "augmented_frames")


os.makedirs(output_folder, exist_ok=True)


def adjust_brightness(image, value):
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    h, s, v = cv2.split(hsv)
    
    v = np.clip(v.astype(np.int16) + value, 0, 255).astype(np.uint8)  # Prevent overflow
    
    hsv = cv2.merge((h, s, v))
    return cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)


def add_noise(image):
    noise = np.random.normal(0, 25, image.shape).astype(np.int16)  # Use int16 to avoid overflow
    noisy_image = np.clip(image.astype(np.int16) + noise, 0, 255).astype(np.uint8)  
    return noisy_image


def rotate_image(image, angle=None):
    if angle is None:
        angle = random.randint(-25, 25)  # Random rotation between -25° and 25°
    (h, w) = image.shape[:2]
    center = (w // 2, h // 2)
    
    matrix = cv2.getRotationMatrix2D(center, angle, 1.0)
    rotated = cv2.warpAffine(image, matrix, (w, h))
    return rotated


def flip_image(image):
    return cv2.flip(image, 1)


def blur_image(image):
    return cv2.GaussianBlur(image, (5, 5), 0)


def adjust_contrast(image, alpha=1.5, beta=0):
    return cv2.convertScaleAbs(image, alpha=alpha, beta=beta)


def gamma_correction(image, gamma=1.5):
    invGamma = 1.0 / gamma
    table = np.array([(i / 255.0) ** invGamma * 255 for i in range(256)]).astype("uint8")
    return cv2.LUT(image, table)


valid_extensions = ('.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.webp')


for filename in os.listdir(input_folder):
    if filename.lower().endswith(valid_extensions):  
        img_path = os.path.join(input_folder, filename)

      
        img = cv2.imread(img_path)
        if img is None:
            print(f"❌ Failed to load image: {img_path}")
            continue  # Skip if image can't be loaded

       
        augmented_images = {
            f"bright_plus_{filename}": adjust_brightness(img, 50),
            f"bright_minus_{filename}": adjust_brightness(img, -50),
            f"noisy_{filename}": add_noise(img),
            f"rotated_{filename}": rotate_image(img),
            f"flipped_{filename}": flip_image(img),
            f"blurred_{filename}": blur_image(img),
            f"contrast_{filename}": adjust_contrast(img),
            f"gamma_{filename}": gamma_correction(img),
        }

        
        for aug_name, aug_img in augmented_images.items():
            output_path = os.path.join(output_folder, aug_name)
            cv2.imwrite(output_path, aug_img)
            print(f"✅ Saving: {output_path}")

print("🚀 **Mega Augmentation Complete!** Overloaded with variations! 🔥")
